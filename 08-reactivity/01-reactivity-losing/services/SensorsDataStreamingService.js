/*=============================================================================
 ========================Этот файл редактировать нельзя========================
 =============================Do not edit this file============================
 ============================================================================*/

const randomInt = (max) => Math.floor(Math.random() * max);
const randomInRange = (min, max) => min + randomInt(max - min);

/**
 * @typedef SensorData
 * @property {number} id
 * @property {string} label
 * @property {number} value
 * @property {string} unit
 */

/**
 * @param {number} id
 * @returns {SensorData}
 */
const randomTemperatureData = (id) => ({
  id,
  label: 'Temp',
  value: randomInRange(40, 100),
  unit: '℃',
});

/**
 * @param {number} id
 * @returns {SensorData}
 */
const randomPressureData = (id) => ({
  id,
  label: 'Pres',
  value: randomInRange(1000, 2500) / 10,
  unit: 'kPa',
});

/**
 * @param {number} id
 * @returns {SensorData}
 */
const randomVoltageData = (id) => ({
  id,
  label: 'Volt',
  value: randomInRange(120, 180) / 10,
  unit: 'V',
});

/**
 * @returns {SensorData[]}
 */
const randomDevicesData = () => {
  let id = 46242; // Just a number
  return [
    randomTemperatureData(id++),
    randomTemperatureData(id++),
    randomTemperatureData(id++),
    randomTemperatureData(id++),
    randomTemperatureData(id++),
    randomTemperatureData(id++),
    randomPressureData(id++),
    randomPressureData(id++),
    randomPressureData(id++),
    randomPressureData(id++),
    randomVoltageData(id++),
    randomVoltageData(id++),
  ];
};

/** Имитация сервиса получения данных */
export class SensorsDataStreamingService {
  _subscribers = new Set();
  _timeout = null;

  constructor() {}

  /** Отправляет запрос на получение данных сенсоров */
  requestData() {
    const delay = randomInt(100);
    if (this._timeout) {
      clearTimeout(this._timeout);
    }
    this._timeout = setTimeout(() => {
      this._receiveData();
    }, delay);
  }

  /**
   * Добавляет callback получения данных датчиков
   * @param {Function} callback - callback получения данных
   */
  subscribe(callback) {
    this._subscribers.add(callback);
  }

  /**
   * Удаляет callback получения данных датчиков
   * @param {Function} callback - callback удаления
   * @returns {boolean} - true если callback был в множестве подписчиков, иначе false
   */
  unsubscribe(callback) {
    return this._subscribers.delete(callback);
  }

  _receiveData() {
    const data = randomDevicesData();
    for (const subscriber of this._subscribers.values()) {
      subscriber(data);
    }
  }
}
