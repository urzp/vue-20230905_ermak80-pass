/******************************************************************************
 *********************Этот файл редактировать нельзя***************************
 *************************Do not edit this file********************************
 ******************************************************************************/

/**
 *
 */
export class SensorsDataController {
  /** @type {object} - Данные датчиков устройств по ID */
  data = {};

  /** @type {SensorsDataStreamingService} - Сервис соединения с сервером датчиков */
  _streamingService;

  /** @type {Set<Function>} Множество коллбеков получения данных датчиков */
  _subscribers = new Set();

  /**
   * @param {SensorsDataStreamingService} streamingService
   */
  constructor(streamingService) {
    this._streamingService = streamingService;
    this._streamingService.subscribe(this.receiveData.bind(this));
    this._streamingService.requestData();
  }

  /**
   * Обработчик получения данных
   * @param {Array<SensorData>} response - данные датчиков
   */
  receiveData(response) {
    // Для оптимизации только обновляем значение датчиков после обновления
    for (const device of response) {
      if (!this.data[device.id]) {
        this.data[device.id] = device;
      } else {
        this.data[device.id].value = device.value;
      }
    }

    for (const callback of this._subscribers.values()) {
      callback(this.data);
    }
  }

  /**
   * Запрашивает текущие данные датчиков
   */
  getData() {
    this._streamingService.requestData();
  }

  /**
   * Добавляет новый callback получения данных
   * @param {Function} callback
   */
  addDataCallback(callback) {
    this._subscribers.add(callback);
  }

  /**
   * Удаляет callback получения данных
   * @param {Function} callback
   * @returns {boolean} true если callback был, иначе false
   */
  removeDataCallback(callback) {
    return this._subscribers.delete(callback);
  }

  close() {
    this._streamingService.unsubscribe(this.receiveData);
  }
}
